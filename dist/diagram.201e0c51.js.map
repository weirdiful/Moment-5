{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["var $b63be9b0371e788c$exports = {};\nfunction $b63be9b0371e788c$var$openNav() {\n    document.getElementById(\"mySidenav\").style.width = \"250px\";\n}\nfunction $b63be9b0371e788c$var$closeNav() {\n    document.getElementById(\"mySidenav\").style.width = \"0\";\n}\n/**\n * Hämta kursdata från API\n * @async\n * @function fetchCourseData\n * @returns {Promise<Object[]>} array av objekt med information om kurser och program\n * @throws {Error} felmeddelande om API anropet misslyckas\n */ async function $b63be9b0371e788c$var$fetchCourseData() {\n    try {\n        let response = await fetch('https://studenter.miun.se/~mallar/dt211g/');\n        let data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n/**\n * Skapar ett stapeldiagram med de 6 mest sökta kurserna\n * @function createCoursesChart\n * @param {Object[]} coursesData - array av kurserna \n */ function $b63be9b0371e788c$var$createCoursesChart(coursesData) {\n    let topCourses = coursesData.filter((item)=>item.type === \"Kurs\").sort((a, b)=>b.applicantsTotal - a.applicantsTotal).slice(0, 6);\n    let labels = topCourses.map((course)=>course.name);\n    let applicants = topCourses.map((course)=>course.applicantsTotal);\n    let ctx = document.getElementById('coursesChart').getContext('2d');\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: \"Antal s\\xf6kande\",\n                    data: applicants,\n                    backgroundColor: [\n                        '#FF8FA3'\n                    ],\n                    borderColor: [\n                        '#EA638C'\n                    ],\n                    borderWidth: 2\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: true\n                }\n            }\n        }\n    });\n}\n/**\n * Skapar ett cirkeldiagram med de 5 mest sökta programmen\n * @function createProgramChart\n * @param {Object[]} programsData - array av programmen\n */ function $b63be9b0371e788c$var$createProgramChart(programsData) {\n    let topPrograms = programsData.filter((item)=>item.type === \"Program\").sort((a, b)=>b.applicantsTotal - a.applicantsTotal).slice(0, 5);\n    let labels = topPrograms.map((program)=>program.name);\n    let applicants = topPrograms.map((program)=>program.applicantsTotal);\n    let ctx = document.getElementById('programChart').getContext('2d');\n    new Chart(ctx, {\n        type: 'pie',\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    data: applicants,\n                    backgroundColor: [\n                        '#6050DC',\n                        ' #D52DB7',\n                        '#FF2E7E',\n                        '#FF6B45',\n                        '#FFAB05'\n                    ]\n                }\n            ]\n        }\n    });\n}\n/**\n * Hämta data och skapa diagram när sidan laddats\n */ document.addEventListener('DOMContentLoaded', async ()=>{\n    let data = await $b63be9b0371e788c$var$fetchCourseData();\n    if (data) {\n        $b63be9b0371e788c$var$createCoursesChart(data);\n        $b63be9b0371e788c$var$createProgramChart(data);\n    }\n});\n//KARTA\n/**\n * Väntar tills DOM-innehållet laddats innan koden kör\n */ document.addEventListener(\"DOMContentLoaded\", function() {\n    //skapar leaflet-karta och sätter koordinaterna till Stockholm\n    let map = L.map('map').setView([\n        59.3327,\n        18.0656\n    ], 13);\n    //OpenStreetMap-bakgrundskartan\n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n    }).addTo(map);\n    //Sökfält och sökknapp\n    let searchBtn = document.getElementById(\"search-btn\");\n    let searchInput = document.getElementById(\"search-input\");\n    /**\n * Lyssnar efter klick på sökknappen för att göra en API-förfrågan till Nominatim\n */ searchBtn.addEventListener(\"click\", function() {\n        let query = searchInput.value.trim(); //hämtar inmatning och tar borta eventuella extra mellanslag\n        if (query.length > 0) //Anropar nominatim API för att söka efter plats\n        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${query}`).then((response)=>{\n            if (!response.ok) throw new Error(\"N\\xe4tverksfel vid s\\xf6kning\");\n            return response.json();\n        }).then((data)=>{\n            if (data.length > 0) {\n                let lat = parseFloat(data[0].lat); //Omvandlar longitud och latitud till tal\n                let lon = parseFloat(data[0].lon);\n                //Flyttar kartans vy till den sökta platsen\n                map.setView([\n                    lat,\n                    lon\n                ], 13);\n                //Skapar markör för plats och lägger till namn som popup\n                L.marker([\n                    lat,\n                    lon\n                ]).addTo(map).bindPopup(`<b>${data[0].display_name}</b>`).openPopup();\n            } else alert(\"Platsen hittades inte. F\\xf6rs\\xf6k igen.\");\n        }).catch((error)=>{\n            console.error(\"Fel vid s\\xf6kning:\", error);\n            alert(\"Ett fel uppstod vid s\\xf6kning. Kontrollera din internetanslutning.\");\n        });\n        else alert(\"Ange en plats att s\\xf6ka efter.\");\n    });\n});\n\n\n//# sourceMappingURL=diagram.201e0c51.js.map\n","\nfunction openNav() {\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\n}\n\nfunction closeNav() {\n  document.getElementById(\"mySidenav\").style.width = \"0\";\n}\n\n/**\n * Hämta kursdata från API\n * @async\n * @function fetchCourseData\n * @returns {Promise<Object[]>} array av objekt med information om kurser och program\n * @throws {Error} felmeddelande om API anropet misslyckas\n */\n\nasync function fetchCourseData() {\n  try {\n      let response = await fetch('https://studenter.miun.se/~mallar/dt211g/');\n      let data = await response.json();\n      return data;\n  } catch (error) {\n      console.error('Error fetching data:', error);\n  }\n}\n\n/**\n * Skapar ett stapeldiagram med de 6 mest sökta kurserna\n * @function createCoursesChart\n * @param {Object[]} coursesData - array av kurserna \n */\nfunction createCoursesChart(coursesData) {\n  let topCourses = coursesData\n      .filter(item => item.type === \"Kurs\")\n      .sort((a, b) => b.applicantsTotal - a.applicantsTotal)\n      .slice(0, 6);\n\n  let labels = topCourses.map(course => course.name);\n  let applicants = topCourses.map(course => course.applicantsTotal);\n\n  let ctx = document.getElementById('coursesChart').getContext('2d');\n  new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: labels,\n          datasets: [{\n              label: 'Antal sökande',\n              data: applicants,\n              backgroundColor: ['#FF8FA3'],\n              borderColor: ['#EA638C'],\n              borderWidth: 2\n          }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n          scales: {\n              y: {\n                  beginAtZero: true\n              }\n          }\n      }\n  });\n}\n\n/**\n * Skapar ett cirkeldiagram med de 5 mest sökta programmen\n * @function createProgramChart\n * @param {Object[]} programsData - array av programmen\n */\nfunction createProgramChart(programsData) {\n  let topPrograms = programsData\n      .filter(item => item.type === \"Program\")\n      .sort((a, b) => b.applicantsTotal - a.applicantsTotal)\n      .slice(0, 5);\n\n  let labels = topPrograms.map(program => program.name);\n  let applicants = topPrograms.map(program => program.applicantsTotal);\n\n  let ctx = document.getElementById('programChart').getContext('2d');\n  new Chart(ctx, {\n      type: 'pie',\n      data: {\n          labels: labels,\n          datasets: [{\n              data: applicants,\n              backgroundColor: ['#6050DC', ' #D52DB7', '#FF2E7E', '#FF6B45', '#FFAB05'],\n          }]\n      }\n  });\n}\n\n/**\n * Hämta data och skapa diagram när sidan laddats\n */\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  let data = await fetchCourseData();\n  \n  if (data) {\n      createCoursesChart(data); \n      createProgramChart(data);\n  }\n});\n\n\n\n//KARTA\n\n/**\n * Väntar tills DOM-innehållet laddats innan koden kör\n */\ndocument.addEventListener(\"DOMContentLoaded\", function (){\n\n  //skapar leaflet-karta och sätter koordinaterna till Stockholm\nlet map = L.map('map').setView([59.3327, 18.0656], 13);\n\n//OpenStreetMap-bakgrundskartan\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 19,\n  attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\n//Sökfält och sökknapp\nlet searchBtn = document.getElementById(\"search-btn\");\nlet searchInput = document.getElementById(\"search-input\");\n\n\n/**\n * Lyssnar efter klick på sökknappen för att göra en API-förfrågan till Nominatim\n */\nsearchBtn.addEventListener(\"click\", function () {\n  let query = searchInput.value.trim(); //hämtar inmatning och tar borta eventuella extra mellanslag\n\n  if (query.length > 0) {\n    //Anropar nominatim API för att söka efter plats\n      fetch (`https://nominatim.openstreetmap.org/search?format=json&q=${query}`)\n        .then(response =>  {\n          if (!response.ok) {\n            throw new Error(\"Nätverksfel vid sökning\");\n          }\n          return response.json();      \n     })\n        .then (data => {\n          if (data.length > 0) {\n            let lat = parseFloat(data[0].lat); //Omvandlar longitud och latitud till tal\n            let lon = parseFloat(data[0].lon);\n\n            //Flyttar kartans vy till den sökta platsen\n            map.setView([lat, lon], 13);\n\n            //Skapar markör för plats och lägger till namn som popup\n            L.marker([lat, lon]).addTo(map)\n            .bindPopup(`<b>${data[0].display_name}</b>`)\n            .openPopup();\n          } else {\n             alert(\"Platsen hittades inte. Försök igen.\");\n          }\n                })\n                .catch(error => {\n                    console.error(\"Fel vid sökning:\", error);\n                    alert(\"Ett fel uppstod vid sökning. Kontrollera din internetanslutning.\");\n                });\n        } else {\n            alert(\"Ange en plats att söka efter.\");\n        }\n    });\n\n  });"],"names":["$b63be9b0371e788c$var$fetchCourseData","response","fetch","json","error","console","document","addEventListener","data","topCourses","labels","applicants","topPrograms","coursesData","filter","item","type","sort","a","b","applicantsTotal","slice","map","course","name","Chart","getElementById","getContext","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","programsData","program","L","setView","tileLayer","maxZoom","attribution","addTo","searchBtn","searchInput","query","value","trim","length","then","ok","Error","lat","parseFloat","lon","marker","bindPopup","display_name","openPopup","alert","catch"],"version":3,"file":"diagram.201e0c51.js.map"}