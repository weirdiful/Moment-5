{"mappings":"AACA,SAAS;IACP,SAAS,cAAc,CAAC,aAAa,KAAK,CAAC,KAAK,GAAG;AACrD;AAEA,SAAS;IACP,SAAS,cAAc,CAAC,aAAa,KAAK,CAAC,KAAK,GAAG;AACrD;AAEA;;;;;;;CAOC,GAED,eAAe;IACb,IAAI;QACA,MAAM,WAAW,MAAM,MAAM;QAC7B,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM,0BAAuB,SAAS,MAAM;QACxE,OAAO,MAAM,SAAS,IAAI;IAC9B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAA6B;QAC3C,OAAO,EAAE;IACb;AACF;AAEA;;CAEC,GAED,SAAS,0BAA0B,IAAI;IAErC,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAA,SAAU,OAAO,IAAI,KAAK;IAE9D,MAAM,gBAAgB,gBAAgB,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,iBAAiB,GAAG,EAAE,iBAAiB,EAAE,KAAK,CAAC,GAAG;IAEvG,MAAM,cAAc,cAAc,GAAG,CAAC,CAAA,SAAU,OAAO,IAAI;IAC3D,MAAM,kBAAkB,cAAc,GAAG,CAAC,CAAA,SAAU,OAAO,iBAAiB;IAE5E,MAAM,MAAM,SAAS,cAAc,CAAC,2BAA2B,UAAU,CAAC;IACxE,IAAI,MAAM,KAAK;QACb,MAAM;QACN,MAAM;YACN,QAAQ;YACR,UAAU;gBAAC;oBACP,OAAO;oBACP,MAAM;oBACN,iBAAiB;wBAAC;wBAAS;wBAAS;wBAAS;wBAAS;wBAAS;qBAAU;oBACzE,aAAa;gBACb;aAAE;QACJ;IAEJ;AACJ;AACI,kBAAkB,IAAI,CAAC,CAAA,OAAQ,0BAA0B;AAG/D,MAAM,MAAM,SAAS,cAAc,CAAC;AACpC,IAAI,MAAM,KAAK;IACf,MAAM;IACN,MAAM;QACN,QAAQ;YAAC;YAAO;YAAQ;YAAU;YAAS;YAAU;SAAS;QAC9D,UAAU;YAAC;gBACX,OAAO;gBACP,MAAM;oBAAC;oBAAI;oBAAI;oBAAG;oBAAG;oBAAG;iBAAE;gBAC1B,aAAa;YACb;SAAE;IACF;IACE,SAAS;QACP,iBAAiB;YAAC;YAAU;YAAO;YAAU;YAAS;YAAU;SAAS;IAC3E;AACF,IAGA,4CAA4C","sources":["src/script.js"],"sourcesContent":["\nfunction openNav() {\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\n}\n\nfunction closeNav() {\n  document.getElementById(\"mySidenav\").style.width = \"0\";\n}\n\n/**\n * Hämta kursdata från API\n * \n * @async\n * @function fetchCourseData\n * @returns {Promise<Object[]>} Promise som är kopplad till array av kursdata\n * @throws {Error} felmeddelande om API anropet misslyckas\n */\n\nasync function fetchCourseData() {\n  try {\n      const response = await fetch(\"https://studenter.miun.se/~mallar/dt211g/\");\n      if (!response.ok) throw new Error(\"Fel vid hämtning: \" + response.status);\n      return await response.json();\n  } catch (error) {\n      console.error(\"Fel vid hämtning av data:\", error);\n      return [];\n  }\n}\n\n/**\n * \n */\n\nfunction createPopularCoursesChart(data) {\n\n  const filteredCourses = data.filter(course => course.term === \"HT23\");\n\n  const sortedCourses = filteredCourses.sort((a, b) => b.applicationsTotal - a.applicationsTotal).slice(0, 6);\n\n    const courseNames = sortedCourses.map(course => course.name);\n    const totalApplicants = sortedCourses.map(course => course.applicationsTotal);\n\n    const ctx = document.getElementById(\"mostPopularCoursesChart\").getContext(\"2d\");\n      new Chart(ctx, {\n        type: \"bar\",\n        data: {\n        labels: courseNames,\n        datasets: [{\n            label: \"Totalt antal sökande\",\n            data: totalApplicants,\n            backgroundColor: ['purple','purple','purple','purple','purple','purple',],\n            borderWidth: 1\n            }]\n          },\n              \n      });\n  }\n      fetchCourseData().then(data => createPopularCoursesChart(data));\n\n\nconst ctx = document.getElementById('myChart');\nnew Chart(ctx, {\ntype: 'bar',\ndata: {\nlabels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\ndatasets: [{\nlabel: '# of Votes',\ndata: [12, 19, 3, 5, 2, 3],\nborderWidth: 1\n}]\n},\n  options: {\n    backgroundColor: [\"#89023E\",\"blue\",\"yellow\", \"green\", \"purple\", \"orange\"]\n  }\n});\n\n\n// https://studenter.miun.se/~mallar/dt211g/"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}