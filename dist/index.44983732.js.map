{"mappings":"AACA,SAAS;IACP,SAAS,cAAc,CAAC,aAAa,KAAK,CAAC,KAAK,GAAG;AACrD;AAEA,SAAS;IACP,SAAS,cAAc,CAAC,aAAa,KAAK,CAAC,KAAK,GAAG;AACrD;AAEA;;;;;;;CAOC,GAED,eAAe;IACb,IAAI;QACA,IAAI,WAAW,MAAM,MAAM;QAC3B,IAAI,OAAO,MAAM,SAAS,IAAI;QAC9B,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wBAAwB;IAC1C;AACF;AAEA;;;;CAIC,GACD,SAAS,mBAAmB,WAAW;IACrC,IAAI,aAAa,YACZ,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK,QAC7B,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,eAAe,GAAG,EAAE,eAAe,EACpD,KAAK,CAAC,GAAG;IAEd,IAAI,SAAS,WAAW,GAAG,CAAC,CAAA,SAAU,OAAO,IAAI;IACjD,IAAI,aAAa,WAAW,GAAG,CAAC,CAAA,SAAU,OAAO,eAAe;IAEhE,IAAI,MAAM,SAAS,cAAc,CAAC,gBAAgB,UAAU,CAAC;IAC7D,IAAI,MAAM,KAAK;QACX,MAAM;QACN,MAAM;YACF,QAAQ;YACR,UAAU;gBAAC;oBACP,OAAO;oBACP,MAAM;oBACN,iBAAiB;oBACjB,aAAa;oBACb,aAAa;gBACjB;aAAE;QACN;QACA,SAAS;YACL,QAAQ;gBACJ,GAAG;oBACC,aAAa;gBACjB;YACJ;QACJ;IACJ;AACF;AAEA;;;;CAIC,GACD,SAAS,mBAAmB,YAAY;IACtC,IAAI,cAAc,aACb,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK,WAC7B,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,eAAe,GAAG,EAAE,eAAe,EACpD,KAAK,CAAC,GAAG;IAEd,IAAI,SAAS,YAAY,GAAG,CAAC,CAAA,UAAW,QAAQ,IAAI;IACpD,IAAI,aAAa,YAAY,GAAG,CAAC,CAAA,UAAW,QAAQ,eAAe;IAEnE,IAAI,MAAM,SAAS,cAAc,CAAC,gBAAgB,UAAU,CAAC;IAC7D,IAAI,MAAM,KAAK;QACX,MAAM;QACN,MAAM;YACF,QAAQ;YACR,UAAU;gBAAC;oBACP,MAAM;oBACN,iBAAiB;wBAAC;wBAAW;wBAAW;wBAAW;wBAAW;qBAAU;gBAC5E;aAAE;QACN;IACJ;AACF;AAEA;;CAEC,GAED,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,IAAI,OAAO,MAAM;IAEjB,IAAI,MAAM;QACN,mBAAmB;QACnB,mBAAmB;IACvB;AACF","sources":["src/script.js"],"sourcesContent":["\nfunction openNav() {\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\n}\n\nfunction closeNav() {\n  document.getElementById(\"mySidenav\").style.width = \"0\";\n}\n\n/**\n * Hämta kursdata från API\n * \n * @async\n * @function fetchCourseData\n * @returns {Promise<Object[]>} array av objekt med information om kurser och program\n * @throws {Error} felmeddelande om API anropet misslyckas\n */\n\nasync function fetchCourseData() {\n  try {\n      let response = await fetch('https://studenter.miun.se/~mallar/dt211g/');\n      let data = await response.json();\n      return data;\n  } catch (error) {\n      console.error('Error fetching data:', error);\n  }\n}\n\n/**\n * Skapar ett stapeldiagram med de 6 mest sökta kurserna\n * @function createCoursesChart\n * @param {Object[]} coursesData - array av kurserna \n */\nfunction createCoursesChart(coursesData) {\n  let topCourses = coursesData\n      .filter(item => item.type === \"Kurs\")\n      .sort((a, b) => b.applicantsTotal - a.applicantsTotal)\n      .slice(0, 6);\n\n  let labels = topCourses.map(course => course.name);\n  let applicants = topCourses.map(course => course.applicantsTotal);\n\n  let ctx = document.getElementById('coursesChart').getContext('2d');\n  new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: labels,\n          datasets: [{\n              label: 'Antal sökande',\n              data: applicants,\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1\n          }]\n      },\n      options: {\n          scales: {\n              y: {\n                  beginAtZero: true\n              }\n          }\n      }\n  });\n}\n\n/**\n * Skapar ett cirkeldiagram med de 5 mest sökta programmen\n * @function createProgramChart\n * @param {Object[]} programsData - array av programmen\n */\nfunction createProgramChart(programsData) {\n  let topPrograms = programsData\n      .filter(item => item.type === \"Program\")\n      .sort((a, b) => b.applicantsTotal - a.applicantsTotal)\n      .slice(0, 5);\n\n  let labels = topPrograms.map(program => program.name);\n  let applicants = topPrograms.map(program => program.applicantsTotal);\n\n  let ctx = document.getElementById('programChart').getContext('2d');\n  new Chart(ctx, {\n      type: 'pie',\n      data: {\n          labels: labels,\n          datasets: [{\n              data: applicants,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#FF9F40'],\n          }]\n      }\n  });\n}\n\n/**\n * Hämta data och skapa diagram när sidan laddats\n */\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  let data = await fetchCourseData();\n  \n  if (data) {\n      createCoursesChart(data); \n      createProgramChart(data);\n  }\n});"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}